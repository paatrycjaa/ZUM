data.frame(1:10, 3:12)
vectorize<-function(dataframe, window_size, slide, aggregations=list(), all=c(),...){
if (length(all)>0){
for(attr_name in names(dataframe)){
aggregations[[attr_name]] = all
}
}
print(aggregations)
attr_names = names(aggregations)
result = c()
col_idx = 1
for (attr_name in attr_names){
column = dataframe[attr_name]
attr_aggreagtions = aggregations[[attr_name]]
for (attr_aggregation_name in attr_aggreagtions){
attr_aggregation = get(attr_aggregation_name)
aggregated_values = data.frame(rollapply(column[,], window_size, attr_aggregation, by=slide))
if (length(result)>0){
result = cbind(result, aggregated_values)
}
else{
result = data.frame(aggregated_values)
}
for (i in 1:ncol(aggregated_values)){
if (ncol(aggregated_values)>1) colnames(result)[col_idx] <- paste(attr_name, attr_aggregation_name, i)
else colnames(result)[col_idx] <- paste(attr_name, attr_aggregation_name)
col_idx = col_idx + 1
}
}
}
return(result)
}
df = data.frame(1:12)
names(df) = c("column1")
aggregations = list(column1=c("mean", "min", "max))
)
asd
asd
]
aggregations <- list(column1=c("mean", "min", "max))
list(letters = c("count_letters"))
list(letters = c("count_letters"))
list(column1=c("mean", "min", "max))
aggregations <- list(column1=c("mean", "min", "max"))
vectorize(dataframe, 3, 3, aggregations)
result = vectorize(df, 3, 3, aggregations)
library(zoo)
result = vectorize(df, 3, 3, aggregations)
result
document()
use_package("tsvectorization")
library(devtools)
document()
document()
library(tsvectorization)
help(package="tsvectorization")
document
document()
help(package="tsvectorization")
library(tsvectorization)
help(package="tsvectorization")
df = data.frame(1:10)
rbind(df,1:20)
rbind(df,data.frame(1:20))
data.frame(c(1:10, seq(1,20,2), seq(1:100,10)))
data.frame(c(1:10, seq(1,20,2), seq(1,100,10)))
df = data.frame(c(1:10, seq(1,20,2), seq(1,100,10)))
names(df) = c("time")
dataframe = df
time_column = df$time
time_differences = as.numeric(time_column[2:length(datetimes)] - time_column[1:length(time_column)-1])
time_differences = as.numeric(time_column[2:length(time_column)] - time_column[1:length(time_column)-1])
plot(time_differences)
local_dt = rollapply(time_differences[,], 10, median, by=1)
local_dt = rollapply(time_differences, 10, median, by=1)
plot(local_dt)
1/0
c(1,2,3)/c(1,2,3)
rate_change = local_dt[2:length(local_dt)]-local_dt[1:(length(local_dt)-1)]
plot(rate_change)
relative_rate_change = rate_change/local_dt[1:length(rate_change)]
plot(relative_rate_change)
df = data.frame(c(1:10, seq(11,20,2), seq(1,100,10)))
time_column = df$time
plot(time_column)
time_column = df&time
df = data.frame(c(1:10, seq(11,20,2), seq(1,100,10)))
names(df) = c("time")
time_column = df&time
time_column = df$time
plot(time_column)
df = data.frame(c(1:10, seq(11,30,2), seq(1,100,10)))
names(df) = c("time")
time_column = df$time
plot(time_column)
df = data.frame(c(1:10, seq(11,30,2), seq(1,100,10)))
names(df) = c("time")
dataframe - df
dataframe = df
time_column = df$time
time_differences = as.numeric(time_column[2:length(time_column)] - time_column[1:length(time_column)-1])
local_dt = rollapply(time_differences, 5, median, by=1)
plot(time_differences)
plot(local_dt)
rate_change = local_dt[2:length(local_dt)]-local_dt[1:(length(local_dt)-1)]
plot(rate)change
plot(rate_change)
relative_rate_change = rate_change/local_dt[1:length(rate_change)]
plot(relative_rate_change)
length(time_column)
length(relative_rate_change)
?rollapply
time_differences = as.numeric(time_column[2:length(time_column)] - time_column[1:length(time_column)-1])
local_dt = rollapply(time_differences, 5, median, by=1, fill=c(time_differences[1], 0, time_differences[length(time_differences)]))
plot(local_dt)
chunk_borders = append(which(time_differences>(local_dt*(1+margin))), length(time_differences)+1)
margin = 2
chunk_borders = append(which(time_differences>(local_dt*(1+margin))), length(time_differences)+1)
chunk_borders
time_differences
chunk_borders = append(which(abs(time_differences)>(local_dt*(1+margin))), length(time_differences)+1)
chunk_borders
append(c(1,2,3), c(4,5,6), 123)
append(c(1,2,3), c(4,5,6))
df = data.frame(c(1:10, seq(11,30,2), seq(1,100,10), seq(1,100,10)))
names(df) = c("time")
dataframe = df
time_column = df$time
plot(time_column)
time_differences = as.numeric(time_column[2:length(time_column)] - time_column[1:length(time_column)-1])
local_dt = rollapply(time_differences, 5, median, by=1, fill=c(time_differences[1], 0, time_differences[length(time_differences)]))
rate_change = local_dt[2:length(local_dt)]-local_dt[1:(length(local_dt)-1)]
time_differences = as.numeric(time_column[2:length(time_column)] - time_column[1:length(time_column)-1])
local_dt = rollapply(time_differences, 5, median, by=1, fill=c(time_differences[1], 0, time_differences[length(time_differences)]))
rate_change = local_dt[2:length(local_dt)]-local_dt[1:(length(local_dt)-1)]
relative_rate_change = rate_change/local_dt[1:length(rate_change)]
margin = 10
relative_change_margin = 0.5
plot(local_dt)
plot(relative_rate_change)
which(abs(time_differences)>(local_dt*(1+margin)))
which(abs(relative_rate_change)>(1+relative_change_margin))
plot(abs(time_differences))
abs(time_differences)>(local_dt*(1+margin))
abs(time_differences)-(local_dt*(1+margin))
time_differences
abs(time_differences)
chunk_borders = append(which(abs(time_differences)>(local_dt*(1+margin))), which(abs(relative_rate_change)>(relative_change_margin)))
chunk_borders
abs(time_differences)-(local_dt*(1+margin))
margin = 5
abs(time_differences)-(local_dt*(1+margin))
append(which(abs(time_differences)>(local_dt*(1+margin))), which(abs(relative_rate_change)>(relative_change_margin)))
chunk_borders = append(chunk_borders, length(time_differences)+1)
sort(unique(chunk_borders))
append(which(abs(time_differences)>(local_dt*(1+margin))), which(abs(relative_rate_change)>(relative_change_margin)))
split_dataframe_by_time <-function(dataframe, time_column){
time_differences = as.numeric(time_column[2:length(time_column)] - time_column[1:length(time_column)-1])
local_dt = rollapply(time_differences, 5, median, by=1, fill=c(time_differences[1], 0, time_differences[length(time_differences)]))
rate_change = local_dt[2:length(local_dt)]-local_dt[1:(length(local_dt)-1)]
relative_rate_change = rate_change/local_dt[1:length(rate_change)]
margin = 5
relative_change_margin = 0.5
chunk_borders = append(which(abs(time_differences)>(local_dt*(1+margin))), which(abs(relative_rate_change)>(relative_change_margin)))
chunk_borders = append(chunk_borders, length(time_differences)+1)
chunk_borders = sort(unique(chunk_borders))
result = c()
chunk_begining = 1
idx = 1
for (i in chunk_borders){
result[[idx]] = dataframe[chunk_begining:i-1,]
idx = idx + 1
chunk_begining = i
}
return(result)
}
split_dataframe_by_time(df, df$time)
chunk_borders
df
split_dataframe_by_time <-function(dataframe, time_column){
time_differences = as.numeric(time_column[2:length(time_column)] - time_column[1:length(time_column)-1])
local_dt = rollapply(time_differences, 5, median, by=1, fill=c(time_differences[1], 0, time_differences[length(time_differences)]))
rate_change = local_dt[2:length(local_dt)]-local_dt[1:(length(local_dt)-1)]
relative_rate_change = rate_change/local_dt[1:length(rate_change)]
margin = 5
relative_change_margin = 0.5
chunk_borders = append(which(abs(time_differences)>(local_dt*(1+margin))), which(abs(relative_rate_change)>(relative_change_margin)))
chunk_borders = append(chunk_borders, length(time_differences)+1)
chunk_borders = sort(unique(chunk_borders))
result = c()
chunk_begining = 1
idx = 1
for (i in chunk_borders){
result[[idx]] = dataframe[chunk_begining:i,]
idx = idx + 1
chunk_begining = i+1
}
return(result)
}
split_dataframe_by_time(df, df$time)
df = data.frame(c(1:10, seq(11,30,2), seq(1,100,10), seq(1,100,10)))
names(df) = c("time")
split_dataframe_by_time(df, df$time)
split_dataframe_by_time <-function(dataframe, time_column, min_len=0, ...){
time_differences = as.numeric(time_column[2:length(time_column)] - time_column[1:length(time_column)-1])
local_dt = rollapply(time_differences, 5, median, by=1, fill=c(time_differences[1], 0, time_differences[length(time_differences)]))
rate_change = local_dt[2:length(local_dt)]-local_dt[1:(length(local_dt)-1)]
relative_rate_change = rate_change/local_dt[1:length(rate_change)]
margin = 5
relative_change_margin = 0.5
chunk_borders = append(which(abs(time_differences)>(local_dt*(1+margin))), which(abs(relative_rate_change)>(relative_change_margin)))
chunk_borders = append(chunk_borders, length(time_differences)+1)
chunk_borders = sort(unique(chunk_borders))
result = c()
chunk_begining = 1
idx = 1
for (i in chunk_borders){
if (i-chunk_begining>min_len){
result[[idx]] = dataframe[chunk_begining:i,]
}
idx = idx + 1
chunk_begining = i+1
}
return(result)
}
df = data.frame(c(1:10, seq(11,30,2), seq(1,100,10), seq(1,100,10)))
names(df) = c("time")
split_dataframe_by_time(df, df$time)
df = data.frame(c(1:10, seq(11,26,2), seq(1,100,10), seq(1,100,10)))
names(df) = c("time")
split_dataframe_by_time(df, df$time, min_len=8)
split_dataframe_by_time <-function(dataframe, time_column, min_len=0, ...){
time_differences = as.numeric(time_column[2:length(time_column)] - time_column[1:length(time_column)-1])
local_dt = rollapply(time_differences, 5, median, by=1, fill=c(time_differences[1], 0, time_differences[length(time_differences)]))
rate_change = local_dt[2:length(local_dt)]-local_dt[1:(length(local_dt)-1)]
relative_rate_change = rate_change/local_dt[1:length(rate_change)]
margin = 5
relative_change_margin = 0.5
chunk_borders = append(which(abs(time_differences)>(local_dt*(1+margin))), which(abs(relative_rate_change)>(relative_change_margin)))
chunk_borders = append(chunk_borders, length(time_differences)+1)
chunk_borders = sort(unique(chunk_borders))
result = c()
chunk_begining = 1
idx = 1
for (i in chunk_borders){
if (i-chunk_begining>min_len){
result[[idx]] = dataframe[chunk_begining:i,]
idx = idx + 1
}
chunk_begining = i+1
}
return(result)
}
df = data.frame(c(1:10, seq(11,26,2), seq(1,100,10), seq(1,100,10)))
names(df) = c("time")
split_dataframe_by_time(df, df$time, min_len=8)
df = data.frame(c(1:10, seq(11,20,2), 1:10))
names(df) = c("time")
split_dataframe_by_time(df, df$time, min_len=8)
split_dataframe_by_time(df, df$time)
df = data.frame(c(1:10, seq(11,20,2), 1:10),c(1:25))
names(df) = c("time", data)
split_dataframe_by_time(df, df$time)
df = data.frame(c(1:10, seq(11,20,2), 1:10),c(1:25))
names(df) = c("time", "data")
split_dataframe_by_time(df, df$time)
document()
library(tsvectorization)
help(package = "tsvectorization")
memory.limit()
?rollapply
document()
library(tsvectorization)
help(package="tsvectorization")
library(tsvectorization)
document()
library(fevtools)
library(devtools)
document()
library(tsvectorization)
library(tsvectorization)
?vectorize
library(randomForest)
library(caret)
library(tidyverse)
library(Metrics)
library(e1071)
library(mlbench)
if(!exists("vectorize", mode="function")) source("vectorize.R")
#Load train data - 12 people
df_S2 = read.csv("stress_data/S2_window_10.csv", sep =",", header = TRUE)
df_S3 = read.csv("stress_data/S3_window_10.csv", sep =",", header = TRUE)
df_S4 = read.csv("stress_data/S4_window_10.csv", sep =",", header = TRUE)
df_S5 = read.csv("stress_data/S5_window_10.csv", sep =",", header = TRUE)
df_S6 = read.csv("stress_data/S6_window_10.csv", sep =",", header = TRUE)
df_S7 = read.csv("stress_data/S7_window_10.csv", sep =",", header = TRUE)
df_S8 = read.csv("stress_data/S8_window_10.csv", sep =",", header = TRUE)
df_S10 = read.csv("stress_data/S10_window_10.csv", sep =",", header = TRUE)
df_S11 = read.csv("stress_data/S11_window_10.csv", sep =",", header = TRUE)
df_stress = rbind(df_S2, df_S3, df_S4 ,df_S5 ,df_S6 ,df_S7,df_S8 ,df_S10,df_S11)
#delete NA column
df_stress = df_stress[ , ! apply( df_stress , 2 , function(x) all(is.na(x)) ) ]
#check if any NA
indx <- apply(df_stress, 2, function(x) any(is.na(x) | is.infinite(x)))
indx
#delete index column
df_stress <- df_stress[-1]
length(df_stress[,1])
#rename label
colnames(df_stress)[colnames(df_stress) == "label.first"] <- "label"
View(df_stress)
#shuffle data
#label to factor
df_stress$label = factor(df_stress$label)
rows <- sample(nrow(df_stress))
train_df =df_stress[rows,]
#feature selection
importance_mean = features_importance(train_df, "label")
importance_mean
df_stress_filtered = select_features(train_df,importance_mean, 5, "label")
getwd()
setwd("C:/studia/ZUM/classifying/time-series-vectorization")
library(randomForest)
library(caret)
library(tidyverse)
library(Metrics)
library(e1071)
library(mlbench)
if(!exists("vectorize", mode="function")) source("vectorize.R")
#Load train data - 12 people
df_S2 = read.csv("stress_data/S2_window_10.csv", sep =",", header = TRUE)
df_S3 = read.csv("stress_data/S3_window_10.csv", sep =",", header = TRUE)
df_S4 = read.csv("stress_data/S4_window_10.csv", sep =",", header = TRUE)
df_S5 = read.csv("stress_data/S5_window_10.csv", sep =",", header = TRUE)
df_S6 = read.csv("stress_data/S6_window_10.csv", sep =",", header = TRUE)
df_S7 = read.csv("stress_data/S7_window_10.csv", sep =",", header = TRUE)
df_S8 = read.csv("stress_data/S8_window_10.csv", sep =",", header = TRUE)
df_S10 = read.csv("stress_data/S10_window_10.csv", sep =",", header = TRUE)
df_S11 = read.csv("stress_data/S11_window_10.csv", sep =",", header = TRUE)
df_stress = rbind(df_S2, df_S3, df_S4 ,df_S5 ,df_S6 ,df_S7,df_S8 ,df_S10,df_S11)
#delete NA column
df_stress = df_stress[ , ! apply( df_stress , 2 , function(x) all(is.na(x)) ) ]
#check if any NA
indx <- apply(df_stress, 2, function(x) any(is.na(x) | is.infinite(x)))
indx
#delete index column
df_stress <- df_stress[-1]
length(df_stress[,1])
#rename label
colnames(df_stress)[colnames(df_stress) == "label.first"] <- "label"
View(df_stress)
#shuffle data
#label to factor
df_stress$label = factor(df_stress$label)
rows <- sample(nrow(df_stress))
train_df =df_stress[rows,]
#feature selection
importance_mean = features_importance(train_df, "label")
importance_mean
df_stress_filtered = select_features(train_df,importance_mean, 5, "label")
features_importance <- function(df, label){
columnName <- label
modelFormula <- paste(columnName, " ~ .")
rf_classifier = randomForest(as.formula(modelFormula), data = df, importance = TRUE)
features_value = as.data.frame(importance(rf_classifier, type=1))
features_value = rownames_to_column(features_value)
colnames(features_value) <- c("col", "importance")
features_value <- features_value %>% arrange(desc(importance))
return(features_value)
}
#function returning dataframe with n the most important value
select_features <- function(df,features_value, number_of_features, label){
features_value_selected = head(features_value, number_of_features)
selected_features = factor(features_value_selected$col)
df_selected = select(df, all_of(selected_features), all_of(label))
return(df_selected)
}
library(randomForest)
library(caret)
library(tidyverse)
library(Metrics)
library(e1071)
library(mlbench)
if(!exists("vectorize", mode="function")) source("vectorize.R")
#Load train data - 12 people
df_S2 = read.csv("stress_data/S2_window_10.csv", sep =",", header = TRUE)
df_S3 = read.csv("stress_data/S3_window_10.csv", sep =",", header = TRUE)
df_S4 = read.csv("stress_data/S4_window_10.csv", sep =",", header = TRUE)
df_S5 = read.csv("stress_data/S5_window_10.csv", sep =",", header = TRUE)
df_S6 = read.csv("stress_data/S6_window_10.csv", sep =",", header = TRUE)
df_S7 = read.csv("stress_data/S7_window_10.csv", sep =",", header = TRUE)
df_S8 = read.csv("stress_data/S8_window_10.csv", sep =",", header = TRUE)
df_S10 = read.csv("stress_data/S10_window_10.csv", sep =",", header = TRUE)
df_S11 = read.csv("stress_data/S11_window_10.csv", sep =",", header = TRUE)
df_stress = rbind(df_S2, df_S3, df_S4 ,df_S5 ,df_S6 ,df_S7,df_S8 ,df_S10,df_S11)
#delete NA column
df_stress = df_stress[ , ! apply( df_stress , 2 , function(x) all(is.na(x)) ) ]
#check if any NA
indx <- apply(df_stress, 2, function(x) any(is.na(x) | is.infinite(x)))
indx
#delete index column
df_stress <- df_stress[-1]
length(df_stress[,1])
#rename label
colnames(df_stress)[colnames(df_stress) == "label.first"] <- "label"
View(df_stress)
#shuffle data
#label to factor
df_stress$label = factor(df_stress$label)
rows <- sample(nrow(df_stress))
train_df =df_stress[rows,]
#feature selection
importance_mean = features_importance(train_df, "label")
importance_mean
df_stress_filtered = select_features(train_df,importance_mean, 5, "label")
View(train_df)
train_df[is.na(train_df)] = 0
importance_mean = features_importance(train_df, "label")
View(importance_mean)
